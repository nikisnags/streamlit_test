# -*- coding: utf-8 -*-
"""Продукты.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DtA4zZ5L8RUjyKEyK7qHpOEfGINElskP

# Анализ торгового предприятия
"""

import pandas
import pandas as pd
df = pd.read_csv('Products.csv')

import matplotlib.pyplot as plt

"""Просматриваем нашу таблицу с  помощью **head()**"""

df.head(15)

"""**Для удобства пометим название столбцов и их типовое назначение в датасете**
*   **ProductID** : уникальный идентификатор товара
*   **Weight** : вес продуктов
*  **FatContent** : указывает, содержит ли продукт мало жира или нет
*   **Visibility** : процент от общей площади витрины всех товаров в магазине, отведенный для конкретного продукта
*   **ProductType** : категория, к которой относится товар
*   **MRP** : Максимальная розничная цена (указанная цена) на продукты
*   **OutletID**: уникальный идентификатор магазина
*   **EstablishmentYear** : год основания торговых точек
*   **OutletSize** : размер магазина с точки зрения занимаемой площади
*   **LocationType** : тип города, в котором расположен магазин
*   **OutletType** : указывает, является ли торговая точка просто продуктовым магазином или каким-то супермаркетом
*   **OutletSales** : (целевая переменная) продажи товара в конкретном магазине

Чтобы узнать более подробную информацию о количестве строк, столбцов и тип данных используем **info()**
"""

df.info()

"""Проанализируем количество нулевых значений в стобцах с помощью функции **"data.isnull().sum()"**"""

df.isnull().sum()

"""В результате анализа мы видим, что в столбцах **"Weight"** - 1463 и **"OutletSize"** - 2410 нулевых значения соответсвенно.

Заполняем нулевые значения с помощью **fillna()**. Ячейки заполнятся средними значениями по всему столбцу с учетом анализа всех данных.
"""

df.Weight.fillna(df.Weight.mean(), inplace=True)

df.OutletSize.fillna('Средний', inplace=True)

"""Провереям проделанную работу"""

df['OutletSize'].value_counts()

df.isnull().sum()

"""Теперь удалим дубликаты, если такие имеются с помощью **duplicated()**"""

df.duplicated().sum()

"""Теперь можем приступать к анализу данных торгового предпрятия."""

df.head(10)

"""# Анализ продаж по годам основания

Смотрим количество продаж магазина по году основания, влияет ли это как-то на статистику с помощью **value_counts()**
"""

df['EstablishmentYear'].value_counts()

"""На основе данной таблицы, можно сделать вывод, что магазин, основанный в 1985 году имеет самое большое количество продаж и в 1998 самое маленькое соотвественно.

С помощью **groupby()** узнаем количесвто выручки.
"""

df.groupby('EstablishmentYear')['OutletSales'].sum().astype(int)

"""Все соотвествует количеству продаж. Магазин, основанный в 1985 году самый прибыльный, так как имеет самое большое количество продаж и 1998 год - самый не прибыльный."""

df['OutletID'].value_counts()

df.groupby('OutletID')['OutletSales'].sum().astype(int)

"""# Анализ самого прибыльного магазина по году основания

С помощью **groupby()** выведем таблицу с категорями товаров в количестве 6, чтобы понять, что принесло самую большую прибыль магазину, который основан в 1985 году.
"""

df[df['EstablishmentYear']==1985].groupby('ProductType')['OutletSales'].sum().head(16).astype(int)

"""В данной таблице видим, что самые продаваемые категории, которые принесли самую большую прибыль магазину это "Фрукты и овощи"."""

iproduct_sales1985 = df[df['EstablishmentYear']==1985].groupby('ProductType')['OutletSales'].sum().sort_values(ascending=False).head(12).index
vproduct_sales1985 = df[df['EstablishmentYear']==1985].groupby('ProductType')['OutletSales'].sum().sort_values(ascending=False).head(12).values

plt.bar(x=iproduct_sales1985, height=vproduct_sales1985, color = 'grey')
plt.title('Объем выручки')
plt.ylabel('Сумма продаж')
plt.xlabel('Категории товаров')
plt.xticks(rotation=90)
for i in range(len(vproduct_sales1985)):
    plt.text(i, vproduct_sales1985[i], round(vproduct_sales1985[i]), ha='center', va='bottom')
plt.show()

iproduct1985 = df[df['EstablishmentYear']==1985].groupby('ProductType')['OutletSales'].sum().head(16).index
vproduct1985 = df[df['EstablishmentYear']==1985].groupby('ProductType')['OutletSales'].sum().head(16).values

"""Выведем круговую диаграмму с помощью **plt.pie()**, чтобы сравнить прибыль с категорий товаров визуально."""

plt.pie(vproduct1985, labels=iproduct1985, autopct='%.0f%%')
plt.show()

"""# Анализ по категориям продуктов

С помощью **value_counts()** вычисляем количество продаж товаров по категориям товаров.
"""

df['ProductType'].value_counts()

"""Создаем новую таблицу, чтобы поработать с отдельными данными с помощью **DataFrame ()**. И сразу выводим новую таблицу."""

df_product = pd.DataFrame({'Категория товара': ['Фрукты и овощи','Закуски','Товары для дома','Замороженные продукты','Молочные продукты','Консервы','Выпечка','Здоровье и гигиена','Безалкогольные напитки','Мясо','Хлеб','Крепкие напитки','Другое','Бакалея',
'Завтрак','Морепродукты'], 'Количество': [1232,1200,910,856,682,649,648,520,445,425,251,214,169,148,110,64]})
df_product.head(16)

"""По данным этой таблицы видим, что самая продаваемая категория это **"Фрукты и овощи"** и **"Закуски"**. Количество продаж по эти позициям значительно выше всех остальных. Однако есть и категория, которая покупается совсем редко, это **"Морепродукты"**.

По данной таблице выведем гистрограмму для визуализации данных.
"""

df_product.groupby('Категория товара')['Количество'].mean().plot(title = 'Количество продаж товара по категориям', kind='bar', rot=45, fontsize=10, figsize=(16, 10), color = 'purple')

"""На данной гистрогамме четко видно лидеров продаж и так же категории товаров, которые возможно стоило бы и вовсе убрать с продажи, так как они мало пользуются спросом.

# Самые продаваемые категории товаров

Выведем гистрограмму, основанную на предыдущем примере, но уже отсортируем по убыванию и подпишем все значения для удобства.
"""

iproduct = df.value_counts('ProductType').sort_values(ascending=False).index
vproduct = df.value_counts('ProductType').sort_values(ascending=False).values

plt.bar(x=iproduct, height=vproduct, color = 'red')
plt.title('Самые продаваемые категории товаров')
plt.xlabel('Категории товаров')
plt.ylabel('Количество продаж')
plt.xticks(rotation=90)
for i in range(len(vproduct)):
    plt.text(i, vproduct[i], vproduct[i], ha='center', va='bottom')
plt.show()

"""# Анализ объема выручки

Выведем гистрограмму по таблице, которая будем показывать объем выручки по категориям товаров, чтобы сделать вывод о самых прибыльных категориях вызуально.
"""

df.groupby('ProductType')['OutletSales'].sum().astype(int)

iproduct_sales = df.groupby('ProductType')['OutletSales'].sum().sort_values(ascending=False).head(12).index
vproduct_sales = df.groupby('ProductType')['OutletSales'].sum().sort_values(ascending=False).head(12).values

plt.bar(x=iproduct_sales, height=vproduct_sales, color = 'green')
plt.title('Объем выручки')
plt.ylabel('Сумма продаж')
plt.xlabel('Категории товаров')
plt.xticks(rotation=90)
for i in range(len(vproduct_sales)):
    plt.text(i, vproduct_sales[i], round(vproduct_sales[i]), ha='center', va='bottom')
plt.show()

"""Самыми прибыльными категориями все еще остаются **"Фрукты и овощи"** и **"Закуски"**

# Локация магазина с самыми большими продажами

Посмотрим таблицу с количество продаж в каждом магазине.
"""

df['LocationType'].value_counts()

"""Исходя из данных, сделаем вывод, что самый прибыльным **"Локация 3"**."""

df_location = pd.DataFrame({'Магазин': ['Локация 1','Локация 2','Локация 3'], 'Количество продаж': [2388,2785,3350]})
df_location.head()

ilocation = df.groupby('LocationType')['OutletSales'].sum().index
vlocation = df.groupby('LocationType')['OutletSales'].sum().values

"""Выведем круговую диаграмму для визуального анализа."""

plt.pie(vlocation, labels=ilocation, autopct='%.0f%%')
plt.show()

"""На диаграмме так же видно, что самые высокие продажи в "Локация 3"."""

location=df[['LocationType','ProductType','MRP']]
location.head()

location = location[(location.LocationType != 'Локация 2' ) & (location.LocationType != 'Локация 1')]
location.head()

location['ProductType'].value_counts()

iproduct1985 = df[df['LocationType'] != 'Локация 3'].groupby('ProductType')['OutletSales'].sum().head().index
vproduct1985 = df[df['LocationType']!= 'Локация 3'].groupby('ProductType')['OutletSales'].sum().head().values

plt.pie(vproduct1985, labels=iproduct1985, autopct='%.0f%%')
plt.show()

"""# Вывод

Был проделан анализ данных торогового предприятия по указанным критериям:

1. Выявили самые проадаваемые категории товаров, которые приносят большую прибыль магазинам, а так же товары, которые стоит убрать из продажи из-за низкого спроса.
2. Рассчитали прибыль по году продаж, а так же самые покупаемые категории товаров в самом прибыльном году. На основе данного анализа, нужно уделить внимание на определенные категории товаров и продавать их в большем количестве.
3. Выявили самый прибыльный магазин.
"""
